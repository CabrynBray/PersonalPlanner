@page "/calendarday"

@using Calendar.Data
@inject Calendar.IService.IDayEventService dayEventService
@inject Calendar.IService.IHourEventService hourEventService
@inject IJSRuntime JsRuntime

<style type="text/css">

	#tblParent tbody tr td {
		width: 200px;
		height: 200px;
	}

	#divParent {
		position: relative;
	}

	#divModal {
		z-index: 10;
		position: absolute;
		border: 1px solid #000000;
		border-radius: 3px;
		background-color: #ffffff;
		left: 40%;
		top: 20%;
		width: 400px;
		min-height: 300px;
	}

	.modalHeading {
		text-align: center;
		font-size: 50px;
		text-decoration: underline;
		margin-bottom: 36px;
	}

</style>

<PageTitle>Calendar Day View</PageTitle>

<h1>Calendar Day View</h1>

@* DAY VIEW MODAL *@

@if (displayModalDiaView)
{

	<div id="divModal">
		<div class="container">
			<div class="panel panel-default">
				<div class="panel-heading modalHeading">Set Note</div>

				<div class="row">
					<div class="col-md-4">
						<label>Hour : </label>
					</div>
					<div class="col-md-8s">
						<input type="text" @bind-value="@hourEvent.HourEventHour" placeholder="Type here..." />
					</div>
				</div>

				<div class="row">
					<div class="col-md-4">
						<label>Note : </label>
					</div>
					<div class="col-md-8s">
						<input type="text" @bind-value="@hourEvent.Note" placeholder="Type here..." />
					</div>
				</div>

				<div class="row" style="margin-bottom:10px">
					<div class="col-md-6">
					</div>
					<div class="col-md-6" style="text-align:right">
						<button class="btn btn-success" @onclick="SaveNoteDiaView" style="float:left;margin-right:5px;">Save</button>
						<button class="btn btn-danger" @onclick="CloseModalDiaView" style="float:left;">Close</button>
					</div>
				</div>
			</div>
		</div>
	</div>



}

	@*
	Doble clic en celda
	SaveNoteWeekView
	Guardar en base de datos

	Actualizar campos



	*@

	@*
	Crear modelo: EventHour
	EventHour tiene:

	Nota - String
	FechaYHora - DateTime

	Obtener fecha y hora actuales

	Obtener 7 dias siguientes


	*@

	@*
	Seleccionar dia

	Guardar dia en variable

	Crear lista de fechas

	For

	Empezar en 0

	En cada iteracion agregar fecha obtenida

	Y agregar un dia

	Terminar en 6

	En interfaz

	Crear tabla

	THead

	TBody

	Outer foreach

	Crear lista de strings con:

	12 am
	1 am
	2 am
	3 am
	4 am
	5 am
	6 am
	7 am
	8 am
	9 am
	10 am
	11 am
	12 pm
	1 pm
	2 pm
	3 pm
	4 pm
	5 pm
	6 pm
	7 pm
	8 pm
	9 pm
	10 pm
	11 pm

	Iterar

	Inner foreach

	El horario, y siete espacios vacios

	En cada iteracion agregar una fila para cada hora
	*@

	@* <tbody>
	@for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
	{
	<tr>
	@for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
	{
	var wIndex = weekIndex;
	var dIndex = dayIndex;
	<td @ondblclick="@(() => OpenModal(wIndex, dIndex))">
	@weeks[weekIndex].Dates[dayIndex].DateValue
	<br /><br />

	<label style="color:#c00;font-weight:bold">@weeks[weekIndex].Dates[dayIndex].Note</label>

	<br /><br />

	Cell Number : [@weekIndex, @dayIndex]

	</td>
	}
	</tr>
	}
	</tbody> *@

<InputDate @bind-Value="@_selectedDateDia" />
<button @onclick="GetDia">Change date</button>

<br />
<br />

<table class="table table-bordered table-striped">
	<thead>
		<tr
			<th>
				Hours
			</th>
			<th>
				Notes
			</th>
		</tr>
	</thead>
	<tbody>
		@for (int i = 0; i < 24; i++)
		{
			var hora = i;
			<tr>
				<td>
					@horas[i]
				</td>
				<td @ondblclick="@(() => OpenModalDiaView(hora))">
					@_selectedDateDia.ToString()
					<br /><br />
					<label style="color:#c00;font-weight:bold"> @if (@eventosOrdenadosDia[i] != null)
							@eventosOrdenadosDia[i].Note
	</label>
				</td>
			</tr>
		}
	</tbody>
</table>

@code {

	HourEvent[] eventosOrdenadosDia = new HourEvent[24];

	List<HourEvent> eventosDia = new List<HourEvent>();

	List<string> weekDays = new List<string>();

	List<DateTime> semana = new List<DateTime>();
	List<int> horas = new List<int>()
	{
		0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23
	};

	private async Task GetDia()
	{
		DateTime currentDate = _selectedDateDia;

		eventosDia = await hourEventService.GetEvents(_selectedDateDia, _selectedDateDia);

		foreach (HourEvent e in eventosDia)
		{
			var hourEvent = e.HourEventHour;
			int indexHour = horas.IndexOf(hourEvent);
			eventosOrdenadosDia[indexHour] = e;
		}
	}

	private DateTime selectedDateDia;
	public DateTime _selectedDateDia
	{
		get { return selectedDateDia; }
		set
		{
			selectedDateDia = value;
			//Do Other tasks ......
			// Eg updateSomething();
		}
	}

	HourEvent hourEvent = new HourEvent()
	{
		HourEventHour = 0,
		HourEventDay = DateTime.Now.Date,
		Note = ""
	};

	bool displayModalDiaView = false;

	int selectedWeekIndex = -1;
	int selectedDayIndex = -1;

	int selectedDayWeekView = -1;
	int selectedHour = -1;
	int selectedHourDiaView = -1;


	protected override void OnInitialized()
	{

		selectedDateDia = DateTime.Now;
		GetDia();



	}

	private async Task PopulateLists()
	{
		eventosDia = await hourEventService.GetEvents(_selectedDateDia, _selectedDateDia);
	}

	private void CloseModalDiaView()
	{
		ResetModalDiaView();
	}

	private void OpenModalDiaView(int hour)
	{
		displayModalDiaView = true;
		selectedHourDiaView = hour;
		hourEvent.HourEventHour = hour;
	}

	private async Task SaveNoteDiaView()
	{
		hourEvent = await hourEventService.CreateAsync(hourEvent);

		hourEvent.HourEventDay = _selectedDateDia;

		GetDia();

		ResetModalDiaView();
	}

	private void ResetModalDiaView()
	{
		displayModalDiaView = false;
	}
}
